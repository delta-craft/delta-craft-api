scalar Date

scalar PointType

enum PointTypeEnum {
  Mining
  Crafting
  Warfare
  Journey
}

type PointSummary {
  mining: Float
  crafting: Float
  warfare: Float
  journey: Float
}

type PointSummaryWrapper {
  summary: PointSummary
  ratios: PointSummary
}

type Point {
  id: ID
  points: Int
  userId: ID
  pointType: PointType
  description: String
  created: Date
  pointTags: [PointTag]
}

type PointTag {
  id: ID
  pointId: ID
  key: String
  value: String
}

type User {
  id: ID
  name: String
  image: String
  userConnection: UserConnections
}

type UserConnections {
  id: ID
  team: Team
  teamId: ID
  nextId: ID
  next: User
  name: String
  consent: Date
  points: [Point]
  pointSummary: PointSummaryWrapper
  stats: Stats
}

type LoginSession {
  id: ID
  ip: String
  auth: Boolean
  updated: Date
  authRequest: Date
}

type Team {
  id: ID
  name: String
  teamColourHex: String
  majorTeam: String
  ownerConnId: ID
  userConnections: [UserConnections]
  pointSummary: PointSummaryWrapper
}

type PointSummaryMajor {
  blue: PointSummaryWrapper
  red: PointSummaryWrapper
}

type Consent {
  id: ID
  title: String
  content: String
  created: Date
}

type Poll {
  id: ID
  title: String
  pollOptions: [PollOption]
}

type PollOption {
  id: ID
  pollId: ID
  text: String
  description: String
  image: String
  poll: Poll
  voted: Boolean
}

type PollVotes {
  id: ID
  connectionId: ID
  pollOptionId: ID
  pollOption: PollOption
  connection: UserConnections
}

type Subscription {
  pointAdded(userId: ID!): Point
}

type Stats {
  mining: CraftingMiningStat
  crafting: CraftingMiningStat
  mob: MobStat
}

type CraftingMiningStat {
  totalPoints: Int
  data: [CraftingMiningStatData]
}

type CraftingMiningStatData {
  material: String
  count: Int
}

type MobStat {
  totalPoints: Int
  data: [CraftingMiningStatData]
}

type MobStatData {
  entity: String
  count: Int
}

type Query {
  userConnections: [UserConnections]
  user: User
  player(nickname: String!): UserConnections
  players: [UserConnections]
  teams: [Team]
  team(id: ID!): Team
  majorTeamsSummary: PointSummaryMajor
  loginSession: LoginSession
  consents: [Consent]
  poll(id: ID!): Poll
  point(id: ID!): Point
}

type Mutation {
  updateNickname(nickname: String!): Boolean
  updateTeam(name: String!): Boolean
  updateConsent: Boolean
  updateLoginSession(confirm: Boolean!): Boolean
  updateFcmToken(token: String!): Boolean
  createOrUpdateTeam(name: String!): Boolean
  joinTeam(code: String!): Boolean
  updateVote(optionId: ID!): Boolean
}
